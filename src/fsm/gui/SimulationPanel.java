/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Simulation.java
 *
 * Created on 13.06.2012, 02:01:27
 */
package fsm.gui;

import fsm.Configuration;
import fsm.Edge;
import fsm.Element;
import fsm.Fsm;
import fsm.Vertex;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.AbstractListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Konnarr
 */
public class SimulationPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;

    class SimListRenderer extends JLabel implements ListCellRenderer<ArrayList<Configuration>> {
        private static final long serialVersionUID = 1L;

        @Override
        public Component getListCellRendererComponent(JList<? extends ArrayList<Configuration>> list, ArrayList<Configuration> value, int index, boolean isSelected, boolean cellHasFocus) {
            setOpaque(true);
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setText("");
            if (value == null) return this;
            for (Configuration c: value) {
                setText((getText().length() == 0?"":getText()+" \u22a6 ")
                            +"\u3008"+c.q.getName()+", "
                            +(c.input.length()==0?"\u03B5":c.input) + "\u3009");
            }
            Configuration last = value.get(value.size()-1);
            if (last.input.length() == 0) setText(getText()+(last.q.isFinal()?" \u2713":" \u2717"));
            return this;
        }
        
    }
    
    class SimListModel extends AbstractListModel<ArrayList<Configuration>> {
        private static final long serialVersionUID = 1L;

        @Override
        public int getSize() {
            return fsm.getSimulation().size();
        }

        @Override
        public ArrayList<Configuration> getElementAt(int index) {
            if (index < getSize() && index >= 0)
                return fsm.getSimulation().get(index); 
            return null;
        }
        
        public void notifyNewElements() {
            fireContentsChanged(this, 0, getSize()-1);
        }
        
    }
    
    private Fsm fsm;
    
    /** Creates new form Simulation */
    public SimulationPanel(Fsm fsm) {
        this.fsm = fsm;
        initComponents();
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        texInput = new javax.swing.JTextField();
        butBegin = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        butEnd = new javax.swing.JButton();
        butStop = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<ArrayList<Configuration>>();
        jComboBox1 = new javax.swing.JComboBox<String>();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        texInput.setText("01");
        texInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        butBegin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fsm/gui/icons/beginning.png"))); // NOI18N
        butBegin.setToolTipText("Simulation starten bzw. zum Beginn der Simulation");
        butBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBeginActionPerformed(evt);
            }
        });

        butNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fsm/gui/icons/next.png"))); // NOI18N
        butNext.setToolTipText("Schritt vorwärts");
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });

        butEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fsm/gui/icons/end.png"))); // NOI18N
        butEnd.setToolTipText("ans Ende der Simulation");
        butEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butEndActionPerformed(evt);
            }
        });

        butStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fsm/gui/icons/stop.png"))); // NOI18N
        butStop.setToolTipText("Simulation abbrechen");
        butStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStopActionPerformed(evt);
            }
        });

        butPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fsm/gui/icons/last.png"))); // NOI18N
        butPrev.setToolTipText("Schritt zurück");
        butPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrevActionPerformed(evt);
            }
        });

        jCheckBox1.setText("auto");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jList2.setModel(new SimListModel());
        jList2.setCellRenderer(new SimListRenderer());
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Eingabe simulieren", "Konstruktion simulieren", "ausgewählte Berechnung simulieren" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel());
        jSpinner2.setVisible(false);
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jLabel1.setText("jLabel1");
        jLabel1.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinner2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(texInput, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(butBegin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butPrev, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butNext, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butStop, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(texInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butNext)
                    .addComponent(butEnd, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(butStop)
                    .addComponent(butPrev)
                    .addComponent(butBegin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private int step = -1;
    
    private void butBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBeginActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            fsm.startSimulation(texInput.getText());
            ((SimListModel)jList2.getModel()).notifyNewElements();
        } else if (jComboBox1.getSelectedIndex() == 1) {
            fsm.setIndex(0);
            jSpinner2.setValue(fsm.getIndex());
        } else {
            fsm.getActive().clear();
            step = 0;
            Configuration c = jList2.getSelectedValue().get(step);
            fsm.getActive().add(c.q);
            fsm.getActive().add(c.edge);
            jLabel1.setText(c.input);
        }
        fsm.notifyObs();        
    }//GEN-LAST:event_butBeginActionPerformed

    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            if (fsm.getSimulation().isEmpty()) {
                if (JOptionPane.showConfirmDialog(this, "Simulation neu starten?") == JOptionPane.OK_OPTION) {
                    butBeginActionPerformed(evt);
                } else return;
            }
            if (fsm.nextStep()) {
                if (fsm.accept()) {
                    JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe.", "Simulation", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe nicht.", "Simulation", JOptionPane.WARNING_MESSAGE);
                }
            }   
            ((SimListModel)jList2.getModel()).notifyNewElements();
        } else if (jComboBox1.getSelectedIndex() == 1) {
            fsm.setIndex(fsm.getIndex()+1);
            jSpinner2.setValue(fsm.getIndex());
        } else {
            if (step < jList2.getSelectedValue().size()-1) {
                fsm.getActive().clear();
                step++;
                Configuration c = jList2.getSelectedValue().get(step);
                fsm.getActive().add(c.q);
                fsm.getActive().add(c.edge);
                jLabel1.setText(c.input);
            } else {
                for (Element e: new ArrayList<Element>(fsm.getActive())) {
                    if (e instanceof Edge) fsm.getActive().remove(e);
                    else {
                        if (((Vertex)e).isFinal()) {
                            JOptionPane.showMessageDialog(this, "Die Berechnung ist akzeptierend.", "Simulation", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Die Berechnung ist nicht akzeptierend.", "Simulation", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
            }
        }
        fsm.notifyObs();
    }//GEN-LAST:event_butNextActionPerformed

    private void butEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butEndActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            while (!fsm.nextStep()) {}
            if (fsm.accept()) {
                JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe.", "Simulation", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe nicht.", "Simulation", JOptionPane.WARNING_MESSAGE);
            }
            ((SimListModel)jList2.getModel()).notifyNewElements();
        } else if (jComboBox1.getSelectedIndex() == 1) {
            fsm.setIndex(Integer.MAX_VALUE);
            jSpinner2.setValue(fsm.getIndex());
        } else {
            fsm.getActive().clear();
            step = jList2.getSelectedValue().size() - 1;
            Configuration c = jList2.getSelectedValue().get(step);
            fsm.getActive().add(c.q);
            jLabel1.setText(c.input);
            if (c.q.isFinal()) {
                JOptionPane.showMessageDialog(this, "Die Berechnung ist akzeptierend.", "Simulation", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Die Berechnung ist nicht akzeptierend.", "Simulation", JOptionPane.WARNING_MESSAGE);
            }
        }
        fsm.notifyObs();       
    }//GEN-LAST:event_butEndActionPerformed

    private void butStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStopActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            fsm.stopSimulation();
            ((SimListModel)jList2.getModel()).notifyNewElements();
        } else if (jComboBox1.getSelectedIndex() == 1) {
            fsm.setIndex(Integer.MAX_VALUE);
            jSpinner2.setValue(fsm.getIndex());
        } else {
            step = -1;
            fsm.getActive().clear();
            jLabel1.setText("");
        }
        fsm.notifyObs();
    }//GEN-LAST:event_butStopActionPerformed

    private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            fsm.previousStep();
            ((SimListModel)jList2.getModel()).notifyNewElements(); 
        } else if (jComboBox1.getSelectedIndex() == 1) {
            fsm.setIndex(fsm.getIndex()-1);
            jSpinner2.setValue(fsm.getIndex());
        } else {
            if (step>0) {
                fsm.getActive().clear();
                step--;
                Configuration c = jList2.getSelectedValue().get(step);
                fsm.getActive().add(c.q);
                fsm.getActive().add(c.edge);
                jLabel1.setText(c.input);
            }
        }
        fsm.notifyObs();
    }//GEN-LAST:event_butPrevActionPerformed

    private Timer timer;
    private TimerTask task;
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (timer != null) timer.cancel();
        if (jCheckBox1.isSelected()) {
            timer = new Timer();
            task = new TimerTask(){

                @Override
                public void run() {
                    butNextActionPerformed(new ActionEvent(jCheckBox1, ActionEvent.ACTION_PERFORMED, ""));
                }
                
            };
            timer.schedule(task, (Integer)jSpinner1.getValue()*1000, (Integer)jSpinner1.getValue()*1000);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (timer != null) timer.cancel();
        texInput.setVisible(jComboBox1.getSelectedIndex() == 0);
        jSpinner2.setVisible(jComboBox1.getSelectedIndex() == 1);
        jLabel1.setVisible(jComboBox1.getSelectedIndex() == 2);
        if (jComboBox1.getSelectedIndex() == 2) {
            if (fsm.getSimulation().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Keine Berechnung zum Simulieren.", "Simulation", JOptionPane.WARNING_MESSAGE);
                jComboBox1.setSelectedIndex(0);
            } else if (jList2.getSelectedIndex()<0) {
                jList2.setSelectedIndex(0);
            }
            butBeginActionPerformed(evt);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        if (jComboBox1.getSelectedIndex() == 2) {
            
            butBeginActionPerformed(new ActionEvent(jList2, ActionEvent.ACTION_PERFORMED, ""));
        }
    }//GEN-LAST:event_jList2ValueChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        fsm.setIndex((Integer)jSpinner2.getValue());
        fsm.notifyObs();
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        jCheckBox1ActionPerformed(new ActionEvent(jSpinner1, ActionEvent.ACTION_PERFORMED, ""));
    }//GEN-LAST:event_jSpinner1StateChanged

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBegin;
    private javax.swing.JButton butEnd;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrev;
    private javax.swing.JButton butStop;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<ArrayList<Configuration>> jList2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField texInput;
    // End of variables declaration//GEN-END:variables
}
