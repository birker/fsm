/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Simulation.java
 *
 * Created on 13.06.2012, 02:01:27
 */
package fsm.gui;

import fsm.Edge;
import fsm.Element;
import fsm.Fsm;
import fsm.Vertex;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Konnarr
 */
public class SimulationPanel extends javax.swing.JPanel {

    private Fsm fsm;
    private DefaultListModel lm = new DefaultListModel();
    
    /** Creates new form Simulation */
    public SimulationPanel(Fsm fsm) {
        this.fsm = fsm;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jCheckBox2 = new javax.swing.JCheckBox();

        jTextField1.setText("01");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("Eingabe testen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("starte Simulation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("n√§chster Schritt");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText(" ");

        jButton4.setText("Simulation beenden");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Simulation abbrechen");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("vorheriger Schritt");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("auto");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));

        jList2.setModel(lm);
        jScrollPane2.setViewportView(jList2);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Berechnung");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addComponent(jCheckBox2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBox1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinner1))
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (fsm.accept(jTextField1.getText())) {
                JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe \""+jTextField1.getText()+"\".", "Simulation", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe \""+jTextField1.getText()+"\" nicht.", "Simulation", JOptionPane.WARNING_MESSAGE);

            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private String input = "";
    private int step;
    private ArrayList<Vertex> calcNodes = new ArrayList();
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        fsm.startSim();
        input = jTextField1.getText();
        step = 0;
        jLabel1.setText(input);
        if (jCheckBox2.isSelected()) {
        lm.clear();
        calcNodes.clear();
        for (Element e: fsm.getActive()) {
            if (e instanceof Vertex) {
                lm.addElement("\u3008"+((Vertex)e).getText()+", "+input+/*"\u27e9 "*/"\u3009");
                calcNodes.add((Vertex)e);
            }
        }
        for (Element element: fsm.getActiveEps()) {
            if (element instanceof Edge) {
                Edge e = (Edge) element;
                for (int i = 0; i < calcNodes.size(); i++) {
                    Vertex n = calcNodes.get(i);
                    if (n == e.getFrom()) {
                            calcNodes.add(e.getTo());
                            lm.addElement((((String)lm.get(i)).replace(" \u2713", "").replace(" \u2717", ""))
                                    + " \u22a6 \u3008"+e.getTo().getText()+", "
                                    +(jLabel1.getText().length()==0?"\u03B5":jLabel1.getText()) + "\u3009"
                                    +(jLabel1.getText().length()==0?(e.getTo().isFinal()?" \u2713":" \u2717"):""));
                        
                    }
                }
            }
        }
        }
        fsm.notifyObs();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (input.length()==step) {
            if (JOptionPane.showConfirmDialog(this, "Simulation neu starten?") == JOptionPane.OK_OPTION) {
                jButton2ActionPerformed(evt);
            } else return;
        }
        boolean b = fsm.nextStep(jLabel1.getText());
        //step++;
        //TODO: we can't handle varying blocksize!!!
        //there is serious trouble, because different calculations can be at different letters.
        step += Math.min((fsm.getBlocksize()==0?/*s.length()*/1:fsm.getBlocksize()), jLabel1.getText().length());
        /*if (input.length()<step) jLabel1.setText("");
        else */jLabel1.setText(input.substring(step));
        //berechnung
        if (jCheckBox2.isSelected()) {
        boolean[] processed = new boolean[calcNodes.size()];
        ArrayList<Vertex> origNodes = (ArrayList<Vertex>)calcNodes.clone();
        for (Element element: fsm.getActive()) {
            if (element instanceof Edge) {
                Edge e = (Edge) element;
                for (int i = 0; i < origNodes.size();i++) {
                    Vertex n = origNodes.get(i);
                    if (n == e.getFrom()) {
                        if (processed[i]==true) { //copy
                            calcNodes.add(e.getTo());
                            lm.addElement(((String)lm.get(i)).substring(0, ((String)lm.get(i)).lastIndexOf("\u22a6"))
                                    + " \u22a6 \u3008"+e.getTo().getText()+", "
                                    +(jLabel1.getText().length()==0?"\u03B5":jLabel1.getText()) + "\u3009"
                                    +(jLabel1.getText().length()==0?(e.getTo().isFinal()?" \u2713":" \u2717"):""));
                        } else {
                            calcNodes.set(i, e.getTo());
                            processed[i] = true;
                            lm.set(i, lm.get(i) + " \u22a6 \u3008"+e.getTo().getText()+", "
                                    +(jLabel1.getText().length()==0?"\u03B5":jLabel1.getText()) + "\u3009"
                                    +(jLabel1.getText().length()==0?(e.getTo().isFinal()?" \u2713":" \u2717"):""));
                        }
                    }
                }
            }
        }
        for (int i = 0; i < processed.length; i++) {
            if (processed[i] == false && calcNodes.get(i)!=null) {
                calcNodes.set(i, null);
                lm.set(i, lm.get(i) + " \u22a6 \u22a5 \u2717");
            }
        }
        for (Element element: fsm.getActiveEps()) {
            if (element instanceof Edge) {
                Edge e = (Edge) element;
                for (int i = 0; i < calcNodes.size(); i++) {
                    Vertex n = calcNodes.get(i);
                    if (n == e.getFrom()) {
                            if (n == e.getTo()) continue;
                            calcNodes.add(e.getTo());
                            lm.addElement((((String)lm.get(i)).replace(" \u2713", "").replace(" \u2717", "")) //alte berechnung ohne haken/kreuz
                                    + " \u22a6 \u3008"+e.getTo().getText()+", " //neuer schritt knoten
                                    +(jLabel1.getText().length()==0?"\u03B5":jLabel1.getText()) + "\u3009" //rest text bzw. epsilon
                                    +(jLabel1.getText().length()==0?(e.getTo().isFinal()?" \u2713":" \u2717"):"")); //haken/kreuz f√ºr akzeptanz
                        
                    }
                }
            }
        }
        }
        fsm.notifyObs();
        if (input.length()==step) {
            if (b) {
                JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe.", "Simulation", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Der Automat akzeptiert die Eingabe nicht.", "Simulation", JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        while (input.length()!=step) jButton3ActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        input = "";
        step = 0;
        jLabel1.setText("");
        fsm.getActive().clear();
        fsm.notifyObs();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (step == 0) {
            return;
        }
        int to = step-1;
        jButton2ActionPerformed(evt);
        while (step!=to) {
            jButton3ActionPerformed(evt);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private Timer timer;
    private TimerTask task;
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            timer = new Timer();
            task = new TimerTask(){

                @Override
                public void run() {
                    jButton3ActionPerformed(new ActionEvent(jCheckBox1, ActionEvent.ACTION_PERFORMED, ""));
                }
                
            };
            timer.schedule(task, (Integer)jSpinner1.getValue()*1000, (Integer)jSpinner1.getValue()*1000);
        } else {
            timer.cancel();
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        jScrollPane2.setVisible(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
