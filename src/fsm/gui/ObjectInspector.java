/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fsm.gui;

import fsm.Edge;
import fsm.EdgeFsm;
import fsm.Element;
import fsm.Fsm;
import fsm.Graph;
import fsm.Vertex;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.geom.RectangularShape;
import java.awt.geom.RoundRectangle2D;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.AbstractListModel;
import javax.swing.BoxLayout;
import javax.swing.ComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author Konnarr
 */
public class ObjectInspector extends javax.swing.JPanel implements Observer {
private static final long serialVersionUID = 1L;
    
    public static final HashMap<Color, String> ColorNames = new HashMap<Color, String>(25,0.76f);
    {
        ColorNames.put(Color.BLACK,"schwarz");
        ColorNames.put(Color.WHITE,"weiß");
        ColorNames.put(Color.RED,"rot");
        ColorNames.put(Color.GREEN,"hellgrün");
        ColorNames.put(Color.BLUE,"blau");
        ColorNames.put(Color.CYAN,"cyan");
        ColorNames.put(Color.YELLOW,"gelb");
        ColorNames.put(Color.MAGENTA,"magenta");
        ColorNames.put(Color.LIGHT_GRAY,"hellgrau");//192
        ColorNames.put(Color.GRAY,"grau");//128
        ColorNames.put(Color.DARK_GRAY,"dunkelgrau"); //64
        ColorNames.put(Color.ORANGE,"orange");//255, 200, 0
        ColorNames.put(Color.PINK,"rosa");//255, 175, 175
        //additional colors
        ColorNames.put(new Color(128, 0, 0),"dunkelrot");
        ColorNames.put(new Color(0,128,0), "dunkelgrün");
        ColorNames.put(new Color(0,0,128), "dunkelblau");
        ColorNames.put(new Color(128,128,0), "olivgrün");
        ColorNames.put(new Color(128,0,128), "lila");
        ColorNames.put(new Color(0,128,128), "aquamarin");
    }
    
    private Graph g;
    
    /**
     * Creates new form ObjectInspector
     */
    public ObjectInspector(Graph g) {
        this.g = g;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setMinimumSize(new java.awt.Dimension(0, 0));
        jComboBox1.setPreferredSize(new java.awt.Dimension(0, 23));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(0, 23));

        jTable1.setModel(new MyTableModel(g));
        jTable1.setRowHeight(25);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.setDefaultRenderer(Object.class, new MyTableCellRenderer());
        jTable1.setDefaultEditor(Object.class, new MyTableCellEditor(g));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("löschen");
        jButton1.setMinimumSize(new java.awt.Dimension(0, 0));
        jButton1.setPreferredSize(new java.awt.Dimension(0, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("neuer Knoten");
        jButton2.setMinimumSize(new java.awt.Dimension(0, 0));
        jButton2.setPreferredSize(new java.awt.Dimension(0, 23));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("neue Kante");
        jButton3.setMinimumSize(new java.awt.Dimension(0, 0));
        jButton3.setPreferredSize(new java.awt.Dimension(0, 23));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        g.setChoice(g.addVertex(new Point(0,0)));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (g.getVertices().isEmpty()) {
            Vertex n = g.addVertex(new Point(0,0));
            g.setChoice(g.addEdge(n, n));
        } else {
            g.setChoice(g.addEdge(g.getVertices().get(0), g.getVertices().get(0)));
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (g.getChoice() instanceof Vertex) {
            g.removeVertex((Vertex)g.getChoice());
        } else if (g.getChoice() instanceof Edge) {
            g.removeEdge((Edge) g.getChoice());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

@Override
    public void update(Observable o, Object arg) {
        ((ObjectInspector.MyTableModel)jTable1.getModel()).fillData();
        jTable1.repaint();
    }

    class MyTableCellRenderer extends DefaultTableCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
            } else {
                setBackground(table.getBackground());
                setForeground(table.getForeground());
            }
            setText("");            
            if (value instanceof Boolean) {
                if ((Boolean) value) {
                    setText("\u2713");
                } else {
                    setText("\u2717");
                }
            } else if (value instanceof Color) {
                Color c = (Color) value;
                setBackground(c);
                setForeground(new Color(c.getRed()>128?0:255,c.getGreen()>128?0:255,c.getBlue()>128?0:255));
                if (ColorNames.containsKey(c)) setText(ColorNames.get(c));
                else setText(c.getRed()+", "+c.getGreen()+", "+c.getBlue());
            } else if (value instanceof RectangularShape) {
                setText(Vertex.ShapeType.getEnum((RectangularShape)value).toString());
            } else if (value instanceof Vertex) {
                setText(((Vertex)value).getName());
            } else if (value instanceof Point) {
                setText(((Point)value).x+", "+((Point)value).y);
            } else if (value instanceof Double) {
                setText(""+(double)(int)(((Double)value)*1000)/1000);
            } else if (value == null) {
                setBackground(Color.LIGHT_GRAY);
            } else {
                super.setValue(value);
            }
            return this;
        }
    }
    
    class ElementComboBoxRenderer extends JLabel implements ListCellRenderer<Element> {
        private static final long serialVersionUID = 1L;

        @Override
        public Component getListCellRendererComponent(JList<? extends Element> list, Element value, int index, boolean isSelected, boolean cellHasFocus) {
            setOpaque(true);
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            if (value == null) {
                setText(""); 
            } else if (value instanceof Vertex) {
                setText(((Vertex)value).getName());
            } else {
                setText(((Edge)value).getText());
            }
            return this;
        }

    }
    
    class MyComboBoxModel extends AbstractListModel<Vertex> implements ComboBoxModel<Vertex> {
        private static final long serialVersionUID = 1L;
        Graph g;
        Vertex sel;

        public MyComboBoxModel(Graph g) {
            this.g = g;
        }


        @Override
        public int getSize() {
            return g.getVertices().size();
        }

        @Override
        public Vertex getElementAt(int index) {
            fireContentsChanged(g.getVertices().get(index), index, index);
            return g.getVertices().get(index);
        }

        @Override
        public void setSelectedItem(Object anItem) {
            sel = (Vertex)anItem;
        }

        @Override
        public Object getSelectedItem() {
            return sel;
        }

    }

    class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {
        private static final long serialVersionUID = 1L;
        
        private JTextField text = new JTextField();
        private JComboBox<Edge.PathMode> comboPath = new JComboBox<Edge.PathMode>(Edge.PathMode.values());
        private JComboBox<Vertex.ShapeType> comboShape = new JComboBox<Vertex.ShapeType>(Vertex.ShapeType.values());
        private JLabel color = new JLabel();
        private JCheckBox check = new JCheckBox();
        private JSpinner spinnerInt = new JSpinner(new SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        private JSpinner spinnerIntx = new JSpinner(new SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        private JSpinner spinnerInty = new JSpinner(new SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        private JSpinner spinnerDouble = new JSpinner(new SpinnerNumberModel(Double.valueOf(0), null, null, Double.valueOf(1)));
        private JPanel point = new JPanel();
        private JComboBox<Vertex> comboVertex = new JComboBox<Vertex>();
        
        private Component active;
        
        public MyTableCellEditor(Graph g) {
            color.setOpaque(true);
            point.setLayout(new BoxLayout(point, BoxLayout.LINE_AXIS));
            point.add(spinnerIntx);
            point.add(new JLabel(", "));
            point.add(spinnerInty);
            comboVertex.setModel(new MyComboBoxModel(g));
            comboVertex.setRenderer(new ElementComboBoxRenderer());
            
        }
        
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int rowIndex, int colIndex) {
            if (value instanceof Edge.PathMode) {
                comboPath.setSelectedItem(value);
                active = comboPath;
            } else if (value instanceof RectangularShape) {
                comboShape.setSelectedItem(Vertex.ShapeType.getEnum((RectangularShape)value));
                active =  comboShape;
            } else if (value instanceof Color) {
                Color c = (Color)value;
                color.setBackground(c);
                color.setForeground(new Color(c.getRed()>128?0:255,c.getGreen()>128?0:255,c.getBlue()>128?0:255));
                if (ColorNames.containsKey(c)) color.setText(ColorNames.get(c));
                else color.setText(c.getRed()+", "+c.getGreen()+", "+c.getBlue());
                c = JColorChooser.showDialog(color, "Farbe wählen", (Color)value);
                if (c!=null) {
                    color.setBackground(c);
                    color.setForeground(new Color(c.getRed()>128?0:255,c.getGreen()>128?0:255,c.getBlue()>128?0:255));
                    if (ColorNames.containsKey(c)) color.setText(ColorNames.get(c));
                    else color.setText(c.getRed()+", "+c.getGreen()+", "+c.getBlue());
                }
                active =  color;
            } else if (value instanceof Boolean) {
                check.setSelected((Boolean)value);
                active =  check;
            } else if (value instanceof Integer) {
                spinnerInt.setValue((Integer)value);
                active =  spinnerInt;
            } else if (value instanceof Double) {
                spinnerDouble.setValue((Double)value);
                active =  spinnerDouble;
            } else if (value instanceof Point) {
                spinnerIntx.setValue(((Point)value).x);
                spinnerInty.setValue(((Point)value).y);
                active =  point;
            } else if (value instanceof Vertex) {
                comboVertex.setSelectedItem(value);
                active =  comboVertex;
            } else {
                if (value != null) text.setText(value.toString());
                active =  text;
            }
            return active;
        }

        @Override
        public Object getCellEditorValue() {
            if (active == comboPath) {
                return comboPath.getSelectedItem();
            } else if (active == comboShape) {
                return ((Vertex.ShapeType)comboShape.getSelectedItem()).getShapeClass();
            } else if (active == color) {
                return color.getBackground();
            } else if (active == check) {
                return check.isSelected();
            } else if (active == spinnerInt) {
                return spinnerInt.getValue();
            } else if (active == spinnerDouble) {
                return spinnerInt.getValue();
            } else if (active == point) {
                return new Point((Integer)spinnerIntx.getValue(),(Integer)spinnerInty.getValue());
            } else if (active == comboVertex) {
                return comboVertex.getSelectedItem();
            } else {
                return text.getText();
            }
        }
    }

    class MyTableModel extends AbstractTableModel {

        private static final long serialVersionUID = 1L;
        private String[] columnNames = {"Eigenschaft", "Wert"};
        Object[][] dataGraph = {
            {"Name", null},
            {"Kommentar", null},
            {"Default-Werte", null},
            {"Pfadmodus", null},
            {"Kantenfarbe", null},
            {"Kantenrotation", null},
            {"gerichtet", null},
            {"Knotenfarbe", null},
            {"Knotenfüllfarbe", null},
            {"Knoten füllen", null},
            {"autom. Knotenbreite", null},
            {"Knotenbeschr. außen", null},
            {"Knotenform", null},
            {"Knotenbreite", null},
            {"Knotenhöhe", null},
            {"Knoten - Bogenbreite", null},
            {"Knoten - Bogenhöhe", null}
        };
        Object[][] dataVertex = {
            {"Name", null},
            {"Kommentar", null},
            {"Index", null},
            {"Startzustand", null},
            {"Endzustand", null},
            {"Default-Werte benutzen", null},
            {"Farbe", null},
            {"Füllfarbe", null},
            {"füllen", null},
            {"autom. Breite", null},
            {"Beschriftung außen", null},
            {"Beschriftungsposition", null},
            {"Form", null},
            {"Position", null},
            {"Breite", null},
            {"Höhe", null},
            {"Bogenbreite", null},
            {"Bogenhöhe", null}
        };
        Object[][] dataEdge = {
            {"Start", null},
            {"Ziel", null},
            {"Pfadmodus", null},
            {"Farbe", null},
            {"Name", null},
            {"Beschriftungsposition", null},
            {"Beschriftungsrotation", null},
            {"Beschriftungswinkel", null},
            {"gerichtet", null},
            {"Gewicht", null},
            {"Index", null},
            {"Kommentar", null},
            {"Default-Werte benutzen", null},
            {"eingehender Winkel", null},
            {"ausgehender Winkel", null},
            {"Hilfspunkte", null},
            {"Übergänge", null}
        };
        private Graph g;

        public void fillData() {
            if (g.getChoice() == null) {
                dataGraph[0][1] = g.getName();
                dataGraph[1][1] = g.getComment();
                dataGraph[2][1] = g.getDefPathMode();
                dataGraph[4][1] = g.getDefEdgeColor();
                dataGraph[5][1] = g.isDefEdgeLabelRot();
                if (g instanceof Fsm) {
                    dataGraph[6][1] = null;
                } else {
                    dataGraph[6][1] = g.isDefDirected();
                }
                dataGraph[7][1] = g.getDefVertexColor();
                if (g.isDefFillVertex()) {
                    dataGraph[8][1] = g.getDefFillVertexColor();
                } else {
                    dataGraph[8][1] = null;
                }
                dataGraph[9][1] = g.isDefFillVertex();
                dataGraph[10][1] = g.isDefVertexAutoWidth();
                dataGraph[11][1] = g.isDefLabelOutsideVertex();
                dataGraph[12][1] = g.getDefVertexShape();
                dataGraph[13][1] = (int) g.getDefVertexShape().getWidth();
                dataGraph[14][1] = (int) g.getDefVertexShape().getHeight();
                if (g.getDefVertexShape() instanceof RoundRectangle2D) {
                    dataGraph[15][1] = (int) ((RoundRectangle2D)g.getDefVertexShape()).getArcWidth();
                    dataGraph[16][1] = (int) ((RoundRectangle2D)g.getDefVertexShape()).getArcHeight();
                } else {
                    dataGraph[15][1] = null;
                    dataGraph[16][1] = null;
                }
            } else if (g.getChoice() instanceof Vertex) {
                dataVertex[0][1] = ((Vertex)g.getChoice()).getName();
                dataVertex[1][1] = ((Vertex)g.getChoice()).getComment();
                dataVertex[2][1] = ((Vertex)g.getChoice()).getIndex();
                dataVertex[3][1] = ((Vertex)g.getChoice()).isInitial();
                dataVertex[4][1] = ((Vertex)g.getChoice()).isFinal();
                dataVertex[5][1] = ((Vertex)g.getChoice()).isInherit();
                dataVertex[6][1] = ((Vertex)g.getChoice()).getColor();
                if (((Vertex)g.getChoice()).isFillNode()) {
                    dataVertex[7][1] = ((Vertex)g.getChoice()).getFillColor();
                } else {
                    dataVertex[7][1] = null;
                }
                dataVertex[8][1] = ((Vertex)g.getChoice()).isFillNode();
                dataVertex[9][1] = ((Vertex)g.getChoice()).isAutoWidth();
                dataVertex[10][1] = ((Vertex)g.getChoice()).isLabelOutside();
                if (((Vertex)g.getChoice()).isLabelOutside()) {
                    dataVertex[11][1] = ((Vertex)g.getChoice()).getLabel().getBounds().getLocation();
                } else {
                    dataVertex[11][1] = null;
                }
                dataVertex[12][1] = ((Vertex)g.getChoice()).getShape();
                dataVertex[13][1] = ((Vertex)g.getChoice()).getShape().getBounds().getLocation();
                dataVertex[14][1] = (int) ((Vertex)g.getChoice()).getShape().getBounds().getWidth();
                dataVertex[15][1] = (int) ((Vertex)g.getChoice()).getShape().getBounds().getHeight();
                if (((Vertex)g.getChoice()).getShape() instanceof RoundRectangle2D) {
                    dataVertex[16][1] = (int)((RoundRectangle2D)((Vertex)g.getChoice()).getShape()).getArcWidth();
                    dataVertex[17][1] = (int)((RoundRectangle2D)((Vertex)g.getChoice()).getShape()).getArcHeight();
                } else {
                    dataVertex[16][1] = null;
                    dataVertex[17][1] = null;
                }
            } else {
                dataEdge[0][1] = ((Edge)g.getChoice()).getFrom();
                dataEdge[1][1] = ((Edge)g.getChoice()).getTo();
                dataEdge[2][1] = ((Edge)g.getChoice()).getPathMode();
                dataEdge[3][1] = ((Edge)g.getChoice()).getColor();
                dataEdge[4][1] = ((Edge)g.getChoice()).getText();
                dataEdge[5][1] = ((Edge)g.getChoice()).getLabel().getBounds().getLocation();
                dataEdge[6][1] = ((Edge)g.getChoice()).isLabelRot();
                dataEdge[7][1] = ((Edge)g.getChoice()).getLabelRotDeg();
                if (g.getChoice() instanceof EdgeFsm) {
                    dataEdge[8][1] = null;
                } else {
                    dataEdge[8][1] = ((Edge)g.getChoice()).isDirected();
                }
                dataEdge[9][1] = ((Edge)g.getChoice()).getWeight();
                dataEdge[10][1] = ((Edge)g.getChoice()).getIndex();
                dataEdge[11][1] = ((Edge)g.getChoice()).getComment();
                dataEdge[12][1] = ((Edge)g.getChoice()).isInherit();
                dataEdge[13][1] = ((Edge)g.getChoice()).getDegIn();
                dataEdge[14][1] = ((Edge)g.getChoice()).getDegOut();
                dataEdge[15][1] = ((Edge)g.getChoice()).getSupportPoints();
                if (g.getChoice() instanceof EdgeFsm) {
                    dataEdge[16][1] = ((EdgeFsm)g.getChoice()).getTransitions();                
                } else {
                    dataEdge[16][1] = null;
                }
            }
        }
        
        public MyTableModel(Graph g) {
            this.g = g;
            fillData();

        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public int getRowCount() {
            if (g.getChoice() == null) return dataGraph.length;
            else if (g.getChoice() instanceof Vertex) return dataVertex.length;
            else return dataEdge.length;
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (g.getChoice() == null) return dataGraph[row][col];
            else if (g.getChoice() instanceof Vertex) return dataVertex[row][col];
            else return dataEdge[row][col];
        }

        @Override
        public Class<?> getColumnClass(int c) {
            if (c == 0) {
                return String.class;
            }
            return Object.class;
        }

        @Override
        public boolean isCellEditable(int row, int col) {
            if (col == 1 && getValueAt(row, col) != null) {
                return true;
            } else {
                return false;
            }
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            if (g.getChoice() == null) {
                if (getValueAt(row,0).equals("Name")) {//row == 0) {
                    g.setName((String)value);
                } else if (getValueAt(row,0).equals("Kommentar")) {//row == 1) {
                    g.setComment((String)value);
                } else if (getValueAt(row,0).equals("Pfadmodus")) {//row == 3) {
                    g.setDefPathMode((Edge.PathMode)value);
                } else if (getValueAt(row,0).equals("Kantenfarbe")) {//row == 4) {
                    g.setDefEdgeColor((Color)value);
                } else if (getValueAt(row,0).equals("Kantenrotation")) {//row == 5) {
                    g.setDefEdgeLabelRot((Boolean)value);
                } else if (getValueAt(row,0).equals("gerichtet")) {//row == 6) {
                    g.setDefDirected((Boolean)value);
                } else if (getValueAt(row,0).equals("Knotenfarbe")) {//row == 7) {
                    g.setDefVertexColor((Color)value);
                } else if (getValueAt(row,0).equals("Knotenfüllfarbe")) {//row == 8) {
                    g.setDefFillVertexColor((Color)value);
                } else if (getValueAt(row,0).equals("Knoten füllen")) {//row == 9) {
                    g.setDefFillVertex((Boolean)value);
                } else if (getValueAt(row,0).equals("autom. Knotenbreite")) {//row == 10) {
                    g.setDefVertexAutoWidth((Boolean)value);
                } else if (getValueAt(row,0).equals("Knotenbeschr. außen")) {//row == 11) {
                    g.setDefLabelOutsideVertex((Boolean)value);
                } else if (getValueAt(row,0).equals("Knotenform")) {//row == 12) {
                    RectangularShape s;
                    try {
                        s = (RectangularShape)((Class<?>)value).newInstance();
                        s.setFrame(g.getDefVertexShape().getBounds());                    
                        g.setDefVertexShape(s);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(ObjectInspector.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(ObjectInspector.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (getValueAt(row,0).equals("Knotenbreite")) {//row == 13) {
                    g.getDefVertexShape().getBounds().width = (Integer) value;
                } else if (getValueAt(row,0).equals("Knotenhöhe")) {//row == 14) {
                    g.getDefVertexShape().getBounds().height = (Integer) value;
                } else if (getValueAt(row,0).equals("Knoten - Bogenbreite")) {//row == 15) {
                    ((RoundRectangle2D)g.getDefVertexShape()).setRoundRect(g.getDefVertexShape().getBounds().x,
                            g.getDefVertexShape().getBounds().y, g.getDefVertexShape().getBounds().width,
                            g.getDefVertexShape().getBounds().height,(Integer) value,
                            ((RoundRectangle2D)g.getDefVertexShape()).getArcHeight());
                } else if (getValueAt(row,0).equals("Knoten - Bogenhöhe")) {//row == 16) {
                    ((RoundRectangle2D)g.getDefVertexShape()).setRoundRect(g.getDefVertexShape().getBounds().x,
                            g.getDefVertexShape().getBounds().y, g.getDefVertexShape().getBounds().width,
                            g.getDefVertexShape().getBounds().height,((RoundRectangle2D)g.getDefVertexShape()).getArcWidth(),
                            (Integer) value);
                }
            } else if (g.getChoice() instanceof Vertex) {
                Vertex n = (Vertex) g.getChoice();
                if (row == 0) {
                    n.setName((String)value);
                } else if (row == 1) {
                    n.setComment((String)value);
                } else if (row == 2) {
                    n.setIndex((Integer)value);
                } else if (row == 3) {
                    n.setInitial((Boolean)value);
                } else if (row == 4) {
                    n.setFinal((Boolean)value);
                } else if (row == 5) {
                    if ((Boolean)value) n.setInherit();
                } else if (row == 6) {
                    n.setColor((Color)value);
                } else if (row == 7) {
                    n.setFillColor((Color)value);
                } else if (row == 8) {
                    n.setFillNode((Boolean)value);
                } else if (row == 9) {
                    n.setAutoWidth((Boolean)value);
                } else if (row == 10) {
                    n.setLabelOutside((Boolean)value);
                } else if (row == 11) {
                    n.getLabel().setLocation((Point)value);
                } else if (row == 12) {
                    RectangularShape s;
                    try {
                        s = (RectangularShape)((Class<?>)value).newInstance();
                        s.setFrame(g.getDefVertexShape().getBounds());                    
                        n.setShape(s);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(ObjectInspector.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(ObjectInspector.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (row == 13) {
                    n.getShape().getBounds().width = (Integer) value;
                } else if (row == 14) {
                    n.getShape().getBounds().height = (Integer) value;
                } else if (row == 15) {
                    ((RoundRectangle2D)n.getShape()).setRoundRect(n.getShape().getBounds().x,
                            n.getShape().getBounds().y, n.getShape().getBounds().width,
                            n.getShape().getBounds().height,(Integer) value,
                            ((RoundRectangle2D)n.getShape()).getArcHeight());
                } else if (row == 16) {
                    ((RoundRectangle2D)g.getDefVertexShape()).setRoundRect(n.getShape().getBounds().x,
                            n.getShape().getBounds().y, n.getShape().getBounds().width,
                            n.getShape().getBounds().height,((RoundRectangle2D)n.getShape()).getArcWidth(),
                            (Integer) value);
                }
            } else {
                Edge e = (Edge) g.getChoice();
                if (row == 0) {
                    e.setFrom((Vertex)value);
                } else if (row == 1) {
                    e.setTo((Vertex)value);
                } else if (row == 2) {
                    e.setPathMode((Edge.PathMode)value);
                } else if (row == 3) {
                    e.setColor((Color)value);
                } else if (row == 4) {
                    e.setName((String)value);
                } else if (row == 5) {
                    e.getLabel().setLocation((Point)value);
                } else if (row == 6) {
                    e.setLabelRot((Boolean)value);
                } else if (row == 7) {
                    e.setLabelRotDeg((Double)value);
                } else if (row == 8) {
                    e.setDirected((Boolean)value);
                } else if (row == 9) {
                    e.setWeight((Double)value);
                } else if (row == 10) {
                    e.setIndex((Integer)value);
                } else if (row == 11) {
                    e.setComment((String)value);
                } else if (row == 12) {
                    if ((Boolean)value) e.setInherit();
                } else if (row == 13) {
                    e.setDegIn((Double)value);
                } else if (row == 14) {
                    e.setDegOut((Double)value);
                } else if (row == 15) {
                    //Hilfspunkte
                } else if (row == 16) {
                    //Übergänge
                }
            }
            g.notifyObs();
            fireTableCellUpdated(row, col);
        }
    }
}
